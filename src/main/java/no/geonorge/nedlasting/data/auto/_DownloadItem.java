package no.geonorge.nedlasting.data.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import no.geonorge.nedlasting.data.DownloadOrder;

/**
 * Class _DownloadItem was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _DownloadItem extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String COORDINATES_PROPERTY = "coordinates";
    public static final String EXTERNAL_JOB_ID_PROPERTY = "externalJobId";
    public static final String FILE_ID_PROPERTY = "fileId";
    public static final String FILE_NAME_PROPERTY = "fileName";
    public static final String METADATA_UUID_PROPERTY = "metadataUuid";
    public static final String SRID_PROPERTY = "srid";
    public static final String URL_PROPERTY = "url";
    public static final String ORDER_PROPERTY = "order";

    public static final String ORDER_ITEM_ID_PK_COLUMN = "ORDER_ITEM_ID";

    public static final Property<String> COORDINATES = Property.create("coordinates", String.class);
    public static final Property<String> EXTERNAL_JOB_ID = Property.create("externalJobId", String.class);
    public static final Property<String> FILE_ID = Property.create("fileId", String.class);
    public static final Property<String> FILE_NAME = Property.create("fileName", String.class);
    public static final Property<String> METADATA_UUID = Property.create("metadataUuid", String.class);
    public static final Property<Integer> SRID = Property.create("srid", Integer.class);
    public static final Property<String> URL = Property.create("url", String.class);
    public static final Property<DownloadOrder> ORDER = Property.create("order", DownloadOrder.class);

    protected String coordinates;
    protected String externalJobId;
    protected String fileId;
    protected String fileName;
    protected String metadataUuid;
    protected Integer srid;
    protected String url;

    protected Object order;

    public void setCoordinates(String coordinates) {
        beforePropertyWrite("coordinates", this.coordinates, coordinates);
        this.coordinates = coordinates;
    }

    public String getCoordinates() {
        beforePropertyRead("coordinates");
        return this.coordinates;
    }

    public void setExternalJobId(String externalJobId) {
        beforePropertyWrite("externalJobId", this.externalJobId, externalJobId);
        this.externalJobId = externalJobId;
    }

    public String getExternalJobId() {
        beforePropertyRead("externalJobId");
        return this.externalJobId;
    }

    public void setFileId(String fileId) {
        beforePropertyWrite("fileId", this.fileId, fileId);
        this.fileId = fileId;
    }

    public String getFileId() {
        beforePropertyRead("fileId");
        return this.fileId;
    }

    public void setFileName(String fileName) {
        beforePropertyWrite("fileName", this.fileName, fileName);
        this.fileName = fileName;
    }

    public String getFileName() {
        beforePropertyRead("fileName");
        return this.fileName;
    }

    public void setMetadataUuid(String metadataUuid) {
        beforePropertyWrite("metadataUuid", this.metadataUuid, metadataUuid);
        this.metadataUuid = metadataUuid;
    }

    public String getMetadataUuid() {
        beforePropertyRead("metadataUuid");
        return this.metadataUuid;
    }

    public void setSrid(Integer srid) {
        beforePropertyWrite("srid", this.srid, srid);
        this.srid = srid;
    }

    public Integer getSrid() {
        beforePropertyRead("srid");
        return this.srid;
    }

    public void setUrl(String url) {
        beforePropertyWrite("url", this.url, url);
        this.url = url;
    }

    public String getUrl() {
        beforePropertyRead("url");
        return this.url;
    }

    public void setOrder(DownloadOrder order) {
        setToOneTarget("order", order, true);
    }

    public DownloadOrder getOrder() {
        return (DownloadOrder)readProperty("order");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "coordinates":
                return this.coordinates;
            case "externalJobId":
                return this.externalJobId;
            case "fileId":
                return this.fileId;
            case "fileName":
                return this.fileName;
            case "metadataUuid":
                return this.metadataUuid;
            case "srid":
                return this.srid;
            case "url":
                return this.url;
            case "order":
                return this.order;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "coordinates":
                this.coordinates = (String)val;
                break;
            case "externalJobId":
                this.externalJobId = (String)val;
                break;
            case "fileId":
                this.fileId = (String)val;
                break;
            case "fileName":
                this.fileName = (String)val;
                break;
            case "metadataUuid":
                this.metadataUuid = (String)val;
                break;
            case "srid":
                this.srid = (Integer)val;
                break;
            case "url":
                this.url = (String)val;
                break;
            case "order":
                this.order = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.coordinates);
        out.writeObject(this.externalJobId);
        out.writeObject(this.fileId);
        out.writeObject(this.fileName);
        out.writeObject(this.metadataUuid);
        out.writeObject(this.srid);
        out.writeObject(this.url);
        out.writeObject(this.order);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.coordinates = (String)in.readObject();
        this.externalJobId = (String)in.readObject();
        this.fileId = (String)in.readObject();
        this.fileName = (String)in.readObject();
        this.metadataUuid = (String)in.readObject();
        this.srid = (Integer)in.readObject();
        this.url = (String)in.readObject();
        this.order = in.readObject();
    }

}
