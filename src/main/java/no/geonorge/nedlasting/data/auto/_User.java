package no.geonorge.nedlasting.data.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _User was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _User extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String PASSWORD_SHA512_PROPERTY = "passwordSha512";
    public static final String USERNAME_PROPERTY = "username";

    public static final String USERNAME_PK_COLUMN = "USERNAME";

    public static final Property<String> PASSWORD_SHA512 = Property.create("passwordSha512", String.class);
    public static final Property<String> USERNAME = Property.create("username", String.class);

    protected String passwordSha512;
    protected String username;


    public void setPasswordSha512(String passwordSha512) {
        beforePropertyWrite("passwordSha512", this.passwordSha512, passwordSha512);
        this.passwordSha512 = passwordSha512;
    }

    public String getPasswordSha512() {
        beforePropertyRead("passwordSha512");
        return this.passwordSha512;
    }

    public void setUsername(String username) {
        beforePropertyWrite("username", this.username, username);
        this.username = username;
    }

    public String getUsername() {
        beforePropertyRead("username");
        return this.username;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "passwordSha512":
                return this.passwordSha512;
            case "username":
                return this.username;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "passwordSha512":
                this.passwordSha512 = (String)val;
                break;
            case "username":
                this.username = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.passwordSha512);
        out.writeObject(this.username);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.passwordSha512 = (String)in.readObject();
        this.username = (String)in.readObject();
    }

}
